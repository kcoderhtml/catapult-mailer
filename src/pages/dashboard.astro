---
import { date } from "astro/zod";
import Layout from "../layouts/Layout.astro";

import { db, Subscribers } from "astro:db";
import { like } from "astro:db";

let subscribers = await db.select().from(Subscribers);

let PageMessage: {
	ok: boolean;
	message: string;
} | null = null;

if (Astro.request.method === "POST") {
	const data = await Astro.request.formData();

	const subject = data.get("subject");
	const message = data.get("message");
	const messageType = data.get("messageType");

	if (data.has("send")) {
		const emails = subscribers.map((subscriber) => subscriber.email);

		const email = {
			to: import.meta.env.SEND_EMAIL,
			bcc: emails,
			from: import.meta.env.SEND_EMAIL,
			subject: subject,
			markdown:
				messageType === "text/markdown"
					? message +
						`  \n\n You're receiving this email because you subscribed to ${import.meta.env.NAME}'s newsletter. If you'd like to stop receiving emails from ${import.meta.env.NAME}, [unsubscribe here](${Astro.url.origin}/api/unsubscribe)`
					: undefined,
			html:
				messageType === "text/html"
					? message +
						`  \n\n You're receiving this email because you subscribed to ${import.meta.env.NAME}'s newsletter. If you'd like to stop receiving emails from ${import.meta.env.NAME}, <a href="${Astro.url.origin}/api/unsubscribe"> unsubscribe here </a>`
					: undefined,
			text:
				messageType === "text/plain"
					? message +
						`  \n\n You're receiving this email because you subscribed to ${import.meta.env.NAME}'s newsletter. If you'd like to stop receiving emails from ${import.meta.env.NAME} go to the following link: ${Astro.url.origin}/api/unsubscribe to unsubscribe.`
					: undefined,
		};

		const response = await fetch(import.meta.env.EMAIL_API, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				Authorization: process.env.EMAIL_API_KEY || "",
			},
			body: JSON.stringify(email),
		});

		if (!response.ok) {
			PageMessage = {
				ok: false,
				message: `Failed to send message to users. ${response.status} ${response.statusText}`,
			};
			console.log(response.status, response.statusText, await response.text());
		} else {
			PageMessage = {
				ok: true,
				message: "Email sent successfully!",
			};
		}
	} else if (data.has("remove")) {
		const email = data.get("email");

		const response = await db
			.delete(Subscribers)
			.where(like(Subscribers.email, email as string));

		subscribers = subscribers.filter(
			(subscriber) => subscriber.email !== email
		);

		if (response) {
			PageMessage = {
				ok: true,
				message: "User removed",
			};
		} else {
			PageMessage = {
				ok: false,
				message: "Failed to remove user",
			};
		}
	}
}
---

<Layout title="Dashboard">
	<article
		class="prose lg:prose-xl text-center prose-neutral dark:prose-invert"
	>
		<h1>Welcome to Catapult Mailer!</h1>
		<p>
			You can use this dashboard to send emails to your subscribers. You can
			also view the list of subscribers and their details.
		</p>

		{
			PageMessage && (
				<p class={PageMessage.ok ? "text-green" : "text-red-400"}>
					{PageMessage.message}
				</p>
			)
		}

		<h2>Send Email</h2>

		<form method="post" class="flex flex-col items-center">
			<label for="subject">Subject</label>
			<input
				type="text"
				name="subject"
				id="subject"
				class="w-9/12 bg-mantle p-2 rounded"
				required
			/>

			<!-- dropdown for text or markdown -->
			<label for="messageType">Message Type</label>
			<select
				name="messageType"
				id="messageType"
				class="w-9/12 bg-mantle p-2 rounded"
			>
				<option value="text/html">HTML</option>
				<option value="text/markdown" selected>Markdown</option>
				<option value="text/plain">Plain Text</option>
			</select>
			<label for="message">Message</label>
			<textarea
				name="message"
				id="message"
				class="w-9/12 bg-mantle p-2 rounded"
				required></textarea>

			<button
				type="submit"
				name="send"
				class="bg-yellow dark:bg-red dark:text-crust rounded w-48 mt-5"
				>Send Email</button
			>
		</form>

		<h2>Subscribers</h2>
		<table>
			<thead>
				<tr>
					<th>Name</th>
					<th>Email</th>
					<th>Subscribed At</th>
					<th>Remove user</th>
				</tr>
			</thead>
			<tbody>
				{
					subscribers.map((subscriber) => (
						<tr>
							<td>{subscriber.name}</td>
							<td>{subscriber.email}</td>
							<td>
								{subscriber.subscribedAt.toLocaleDateString([], {
									month: "long",
									day: "numeric",
									year: "numeric",
								}) +
									" at " +
									subscriber.subscribedAt.toLocaleTimeString([], {
										hour: "2-digit",
										minute: "2-digit",
									})}
							</td>
							<td>
								<form method="post">
									<input type="hidden" name="email" value={subscriber.email} />
									<button
										type="submit"
										name="remove"
										class="bg-red dark:bg-yellow dark:text-crust rounded p-2"
									>
										Remove
									</button>
								</form>
							</td>
						</tr>
					))
				}
			</tbody>
		</table>
	</article>
</Layout>
